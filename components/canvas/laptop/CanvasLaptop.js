import * as THREE from 'three'
import React, { Suspense, useRef, useState, useEffect, useCallback } from 'react'
import { Canvas, useFrame, Stars, useThree } from '@react-three/fiber'
import { Html, Environment, useGLTF, ContactShadows, OrbitControls, Box } from '@react-three/drei'

import TextTesellation from '../tesellationText/TextTesellation'

function Model({ setControlsEnabled, ...props}) {

  const group = useRef()

  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb')

  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, Math.cos(t / 2) / 10 + 0.25, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, Math.sin(t / 4) / 10, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, Math.sin(t / 4) / 20, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-5 + Math.sin(t)) / 5, 0.1)
  })

  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null} >
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh geometry={nodes['Cube008_2'].geometry}>
            {/* Drei's HTML component can now "hide behind" canvas geometry */}
            <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
              <div className="wrapper">
                <canvas id='canvas_laptop' style={{backgroundColor:'blue'}}></canvas>
              </div>
            </Html>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}

function BoxFollowCamera({ setControlsEnabled, ...props }) {

  const ref = useRef();
  const { camera, scene } = useThree();
  useEffect(()=>{
    if(ref.current){
      camera.add(ref.current);
      scene.add(camera);
    }
  },[ref.current]);

  return (
    <Box ref={ref} {...props} />
  )
}

export default function CanvasLaptop({style}) {

  const [controlsEnabled, setControlsEnabled] = useState(true)

  const redirectPortfolio = useCallback( (e) => {
      // console.log(e)
      // e.nativeEvent.preventDefault()
      console.log('redirect')
      window.open('https://react-three-espinaco-espisepi.vercel.app/')
  }, [])

  return (
    <Canvas style={style} dpr={[1, 2]} camera={{ position: [-10, 0, -25], fov: 35 }}>
      <pointLight position={[10, 10, 10]} intensity={1.5} />
      <Suspense fallback={null}>
        <group rotation={[0, Math.PI, 0]}>
          <Model setControlsEnabled={setControlsEnabled} />
        </group>
        <group onPointerDown={(e)=>redirectPortfolio(e)} onClick={(e)=>redirectPortfolio(e)}>
          {/* <BoxFollowCamera position={[0,-1.2,-5]} scale={[2,0.3,1]} material-visible={false} material-color='blue' /> */}
          <TextTesellation onPointerDown={(e)=>redirectPortfolio(e)} onClick={(e)=>redirectPortfolio(e)} text='Go To Portfolio' pointerAnimation={false} position={[0,2,2]} scale={[0.02,0.03,0.03]} />
        </group>
        <group >
          <BoxFollowCamera position={[0,1.2,-5]} scale={[2,0.75,1]} material-visible={false} material-color='blue' onPointerDown={(e)=>setControlsEnabled(false)} onPointerUp={(e)=>setControlsEnabled(true)} onPointerLeave={(e)=>setControlsEnabled(true)} />
          <BoxFollowCamera position={[0,-1.2,-5]} scale={[2,0.75,1]} material-visible={false} material-color='blue' onPointerDown={(e)=>setControlsEnabled(false)} onPointerUp={(e)=>setControlsEnabled(true)} onPointerLeave={(e)=>setControlsEnabled(true)} />
          <BoxFollowCamera position={[1.75,0,-5]} scale={[1,5,1]} material-visible={false} material-color='blue' onPointerDown={(e)=>setControlsEnabled(false)} onPointerUp={(e)=>setControlsEnabled(true)} onPointerLeave={(e)=>setControlsEnabled(true)} />
          <BoxFollowCamera position={[-1.75,0,-5]} scale={[1,5,1]} material-visible={false} material-color='blue' onPointerDown={(e)=>setControlsEnabled(false)} onPointerUp={(e)=>setControlsEnabled(true)} onPointerLeave={(e)=>setControlsEnabled(true)} />
        </group>
        <Environment preset="city" />
      </Suspense>
      <ContactShadows rotation-x={Math.PI / 2} position={[0, -4.5, 0]} opacity={1} width={20} height={20} blur={2} far={4.5} />
      <OrbitControls enabled={controlsEnabled} enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} />
    </Canvas>
  )
}
